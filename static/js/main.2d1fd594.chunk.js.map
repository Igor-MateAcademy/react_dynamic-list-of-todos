{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","query","statusSearch","queryHandler","event","setState","target","value","selectHandler","todoFinder","todos","props","filter","todo","title","toLowerCase","includes","completed","buttonHandler","this","sortedTodos","className","type","placeholder","onChange","map","readOnly","onClick","userId","id","React","PureComponent","request","a","fetch","responce","ok","Error","status","statusText","json","getUsers","getUserById","allUsers","find","user","CurrentUser","selectedUser","then","prevProps","clearUser","undefined","name","email","phone","Component","App","selectedUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2d1fd594.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\n\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[],\n  buttonHandler: (userId: number) => void,\n}\n\ninterface State {\n  query: string,\n  statusSearch: string,\n}\n\nexport class TodoList extends React.PureComponent<Props, State> {\n  state = {\n    query: '',\n    statusSearch: 'all',\n  };\n\n  queryHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ query: event.target.value });\n  };\n\n  selectHandler = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({ statusSearch: event.target.value });\n  };\n\n  todoFinder = () => {\n    const { todos } = this.props;\n    const { query, statusSearch } = this.state;\n\n    return todos\n      .filter(todo => todo.title.toLowerCase()\n        .includes(query.toLowerCase()))\n      .filter(todo => {\n        switch (statusSearch) {\n          case 'completed':\n            return todo.completed;\n\n          case 'active':\n            return todo.completed === false;\n\n          default:\n            return todo;\n        }\n      });\n  };\n\n  render() {\n    const { buttonHandler } = this.props;\n    const { query } = this.state;\n    const sortedTodos = this.todoFinder();\n\n    return (\n      <div className=\"TodoList\">\n        <input\n          value={query}\n          type=\"text\"\n          placeholder=\"Title...\"\n          onChange={this.queryHandler}\n        />\n        <select onChange={this.selectHandler}>\n          <option value=\"all\">\n            All\n          </option>\n          <option value=\"completed\">\n            Completed\n          </option>\n          <option value=\"active\">\n            Still in progress\n          </option>\n        </select>\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {\n              sortedTodos.map((todo) => (\n                <li\n                  className={\n                    todo.completed\n                      ? 'TodoList__item TodoList__item--checked'\n                      : 'TodoList__item TodoList__item--unchecked'\n                  }\n                  key={todo.id}\n                >\n                  <input type=\"checkbox\" readOnly />\n                  <p>{todo.title}</p>\n\n                  <button\n                    className=\"\n                  TodoList__user-button\n                  button\n                \"\n                    type=\"button\"\n                    onClick={() => buttonHandler(todo.userId)}\n                  >\n                    {`User ${todo.userId}`}\n                  </button>\n                </li>\n              ))\n            }\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import { User } from '../types/User';\n\nconst BASE_URL = 'https://mate.academy/students-api/todos';\nconst USERS_URL = 'https://mate.academy/students-api/users';\n\nexport const request = async () => {\n  const responce = await fetch(BASE_URL);\n\n  if (!responce.ok) {\n    throw new Error(`${responce.status} - ${responce.statusText}`);\n  }\n\n  return responce.json();\n};\n\nconst getUsers = async () => {\n  const responce = await fetch(USERS_URL);\n\n  if (!responce.ok) {\n    throw new Error(`${responce.status} - ${responce.statusText}`);\n  }\n\n  return responce.json();\n};\n\nexport const getUserById = async (userId: number) => {\n  const allUsers = await getUsers();\n\n  return allUsers.find((user: User) => user.id === userId);\n};\n","import React from 'react';\nimport { getUserById } from '../../api/api';\nimport { User } from '../../types/User';\nimport './CurrentUser.scss';\n\ninterface Props {\n  userId: number,\n  clearUser: () => void,\n}\n\ninterface State {\n  selectedUser: User | null,\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    selectedUser: null,\n  };\n\n  componentDidMount() {\n    getUserById(this.props.userId)\n      .then((user) => this.setState({ selectedUser: user }));\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      getUserById(this.props.userId)\n        .then((user) => this.setState({ selectedUser: user }));\n    }\n  }\n\n  render() {\n    const { selectedUser } = this.state;\n    const { userId, clearUser } = this.props;\n\n    return (\n      selectedUser === undefined\n        ? `Can't find user by id ${userId}`\n        : (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>{`Selected user: ${selectedUser?.id}`}</span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{selectedUser?.name}</h3>\n            <p className=\"CurrentUser__email\">{selectedUser?.email}</p>\n            <p className=\"CurrentUser__phone\">{selectedUser?.phone}</p>\n            <button\n              className=\"CurrentUser__clear\"\n              type=\"button\"\n              onClick={() => clearUser()}\n            >\n              Clear User\n            </button>\n          </div>\n        )\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nimport { request } from './api/api';\nimport { Todo } from './types/Todo';\n\ninterface State {\n  selectedUserId: number | null;\n  todos: Todo[],\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: null,\n    todos: [],\n  };\n\n  componentDidMount() {\n    request()\n      .then(todos => this.setState({ todos }));\n  }\n\n  buttonHandler = (userId: number) => {\n    if (this.state.selectedUserId !== userId) {\n      this.setState({\n        selectedUserId: userId,\n      });\n    }\n  };\n\n  clearUser = () => {\n    this.setState({ selectedUserId: null });\n  };\n\n  render() {\n    const { selectedUserId, todos } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            buttonHandler={this.buttonHandler}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}